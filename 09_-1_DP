http://www.careercup.com/question?id=19378664

suppose you are given an array of int. for example A[ ] = {1, - 1, 3, 8 ,4 } maximize the sum of subset such that if you include the number in sum, you may not use adjutant numbers to count in sum. so in the example above the max sum is 1+ 8 = 9; 
in A[ ] = { 1, 5, 3, 9, 4 } the max sum is 5 + 9 = 14. 
and in A[ ] = { 1,2,3,4, 5} max sum i s 1 + 3 + 5 = 9



Clear case of Dynamic Programming. 

Follows the recursive structure: 
currentSum = max{A[i], max{A[i-2] + A[i], A[i-2]}, max{A[i-3] + A[i], A[i-3]}, } // i runs from 2 to N. 

Full working implementation in java is given below. Give the input numbers using space as delimiter. 
Eg: 1 - 1 3 8 4 
1 5 3 9 4 
1 2 3 4 5


import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;

public class MaxSumSubset {

	static ArrayList<Integer> input = new ArrayList<Integer>();

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		Pattern pattern = Pattern.compile(System.getProperty("line.separator")
				+ "|\\s");
		scanner.useDelimiter(pattern);

		int intval, tempMax = 0;

		while (scanner.hasNextInt()) {
			intval = scanner.nextInt();
			input.add(intval);
		}

		int[] vals = new int[input.size()];

		if (vals.length > 1) {
			vals[0] = input.get(0);
			vals[1] = Math.max(input.get(0), input.get(1));

			for (int i = 2; i < input.size(); i++) {

				tempMax = Math.max(vals[i - 2], vals[i - 2] + input.get(i));

				vals[i] = Math.max(tempMax, input.get(i));
				if (i - 3 >= 0) {

					int tempMax2 = Math.max(vals[i - 3],
							vals[i - 3] + input.get(i));
					vals[i] = Math.max(tempMax2, vals[i]);
				}
			}
		}
		tempMax = -99999999;
		for (int i = 0; i < vals.length; i++) {
			if (vals[i] > tempMax) {
				tempMax = vals[i];
			}
		}
		System.out.println("Maximum sum=" + tempMax);
	}
}
